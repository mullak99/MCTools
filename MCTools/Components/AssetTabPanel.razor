@using MCTools.Logic

<MudTabPanel Text="@TabName" Class="item-tab-panel" BadgeData="@AssetList.Count" BadgeColor="@BadgeColor">
	<MudList T="object" Dense="true" Padding="false" Class="item-tab-root-list">
		@if (AssetList.Count > 0)
		{
			<MudItem Class="item-tab-panel-item">
				<MudList Dense="true" Padding="true" ReadOnly="true">
					<Virtualize TItem="string" Items="AssetList" ItemSize="@VIRTUALIZER_ITEM_SIZE" OverscanCount="@VIRTUALIZER_OVERSCAN">
						<MudListItem Text="@context"  />
					</Virtualize>
				</MudList>
			</MudItem>
			@if (!HideToolbar)
			{
				<MudToolBar Dense="true" Class="item-table-toolbar" WrapContent="true">
					<MudText Class="pl-4">@AssetList.Count</MudText>
					<MudSpacer />
					@if (CopyToClipboard && JSHelper != null)
					{
						<MudTooltip Text="Copy" Placement="Placement.Top">
							<MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="async () => await InputOutputUtils.CopyTextToClipboard(JSHelper, AssetList)" />
						</MudTooltip>
					}
					@if (!string.IsNullOrWhiteSpace(CustomButtonText) && !string.IsNullOrWhiteSpace(CustomButtonIcon) && CustomButtonCallback.HasDelegate)
					{
						<MudTooltip Text="@CustomButtonText" Placement="Placement.Top">
							<MudIconButton Icon="@CustomButtonIcon" OnClick="CustomButtonCallback" />
						</MudTooltip>
					}
					@if (ExportCallback.HasDelegate)
					{
						<MudTooltip Text="Export" Placement="Placement.Top">
							<MudIconButton Icon="@Icons.Material.Filled.Download" OnClick="ExportCallback" />
						</MudTooltip>
					}

				</MudToolBar>
			}
		}
		else
		{
			<MudItem Class="d-flex justify-center align-content-center flex-wrap flex-grow-1 mud-height-full">
				<MudText Align="Align.Center">@EmptyListText</MudText>
			</MudItem>
		}
	</MudList>
</MudTabPanel>

@code {
	[Parameter] public string TabName { get; set; } = "Assets";
	[Parameter] public string EmptyListText { get; set; } = "No assets";
	[Parameter] public List<string> AssetList { get; set; }
	[Parameter] public bool CopyToClipboard { get; set; } = true;
	[Parameter] public EventCallback ExportCallback { get; set; }
	[Parameter] public Color BadgeColor { get; set; } = Color.Success;
	[Parameter] public bool HideToolbar { get; set; }
	[Parameter] public JSHelper JSHelper { get; set; }

	[Parameter] public string CustomButtonText { get; set; }
	[Parameter] public string CustomButtonIcon { get; set; }
	[Parameter] public EventCallback CustomButtonCallback { get; set; }

	private const float VIRTUALIZER_ITEM_SIZE = 36.02f;
	private const int VIRTUALIZER_OVERSCAN = 64;
}
